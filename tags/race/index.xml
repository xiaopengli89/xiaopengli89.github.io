<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>race on </title>
    <link>/tags/race/</link>
    <description>Recent content in race on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 24 May 2020 14:50:06 +0800</lastBuildDate>
    
	<atom:link href="/tags/race/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于Go Mysql Driver引入QueryContext带来的数据竞争</title>
      <link>/posts/go-mysql-driver-race/</link>
      <pubDate>Sun, 24 May 2020 14:50:06 +0800</pubDate>
      
      <guid>/posts/go-mysql-driver-race/</guid>
      <description>在关于Go Mysql Driver的unexpected EOF错误里提到了连接池，当连接使用完毕后会放回连接池以便其他的操作可以复用这条连接。这里的使用完毕有非常明确的定义：发送缓冲区中不再有未发送的指令，接收缓冲区不再有未接收的数据，下次能读取的数据必须是下一次发送的指令的响应。
通常情况下的SQL操作如下：
rows, err := db.Query(&amp;#34;SELECT a, b FROM some_table&amp;#34;) if err != nil { return err } defer rows.Close() for rows.Next() { var a, b string if err := rows.Scan(&amp;amp;a, &amp;amp;b); err != nil { return err } // ... }  db.Query 返回一个 Rows 游标对象 注册一个 rows.Close 延迟函数用于关闭 Rows 对象 通过 rows.Next 迭代器读取每一行数据 通过 rows.Scan 将当前行的数据存入声明的变量中  整个代码片段会有2种结果
 读取了所有数据 未读取或读取了部分数据，然后发生错误  第一种情况由于读取了所有数据，满足使用完毕的条件，可以放回连接池；第二种情况，由于发生了错误，连接失效，后续会重新打开新连接，新连接自然是满足使用完毕条件的。
如果在 rows.Next 迭代器中，中途退出（未发生错误的情况下），那接收缓冲区中还有未读取的数据，因此对应的SQL驱动需要在 rows.</description>
    </item>
    
  </channel>
</rss>