<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Torigoth</title>
    <link>https://xiaopengli89.github.io/tags/rust/</link>
    <description>Recent content in rust on Torigoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 18 Aug 2020 00:50:39 +0800</lastBuildDate><atom:link href="https://xiaopengli89.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lazy原生类型</title>
      <link>https://xiaopengli89.github.io/posts/lazy-primitives/</link>
      <pubDate>Tue, 18 Aug 2020 00:50:39 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/lazy-primitives/</guid>
      <description>&lt;p&gt;最近 &lt;a href=&#34;https://github.com/rust-lang/rust/pull/72414&#34;&gt;Add lazy initialization primitives to std #72414&lt;/a&gt; 合并进标准库，以前为了实现全局变量的初始化，
一般有2种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;const fn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第三方crate，比如&lt;a href=&#34;https://crates.io/crates/once_cell&#34;&gt;once_cell&lt;/a&gt; 和 &lt;a href=&#34;https://crates.io/crates/lazy_static&#34;&gt;lazy_static&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于&lt;code&gt;const fn&lt;/code&gt;同常量表达式一样，是在&lt;code&gt;const context&lt;/code&gt;上下文中执行，即在编译时计算函数（或表达式）结果，因此在使用上有诸多限制，比如类型参数只能绑定
生命周期和Sized（?Sized），只能调用其他&lt;code&gt;const fn&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;Lazy类型实现的是延迟初始化，因此不必受到&lt;code&gt;const fn&lt;/code&gt;的限制，同时能加快某些组件的启动，未使用到的功能甚至可以不初始化。&lt;/p&gt;
&lt;p&gt;延迟初始化应用广泛，比如配置文件的读取，异步运行时需要初始化全局的Executor等，因此合并进标准库可以方便不少。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crossbeam的无锁并发Channel解析</title>
      <link>https://xiaopengli89.github.io/posts/crossbeam-channel/</link>
      <pubDate>Sat, 08 Aug 2020 20:13:04 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/crossbeam-channel/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/crossbeam&#34;&gt;crossbeam&lt;/a&gt;是一个提供并发编程的工具库，实现了诸如&lt;code&gt;原子Cell&lt;/code&gt;、&lt;code&gt;工作窃取双端队列&lt;/code&gt;、&lt;code&gt;分段队列&lt;/code&gt;、
&lt;code&gt;多生产者多消费者Channel&lt;/code&gt;等无锁并发数据结构，在运行时、调度器、线程同步等领域应用广泛。&lt;/p&gt;
&lt;p&gt;虽然Rust标准库中也提供了用于线程同步的&lt;code&gt;mpsc::channel&lt;/code&gt;，不过内置的channel实现算法和crossbeam不同，也不支持多个消费者。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用Rust实现一个Goroutine</title>
      <link>https://xiaopengli89.github.io/posts/goroutine-rs/</link>
      <pubDate>Wed, 05 Aug 2020 14:11:03 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/goroutine-rs/</guid>
      <description>&lt;p&gt;这几天本来是想实现下Go1.14中的信号抢占调度器，不过结果还是遇到了难点，主要在于如何获取到信号处理前的上下文信息。
这篇文章用于记录下实现的过程，尽管最终只实现了协作式调度，
但还是整理出了目前用户态实现异步抢占或类抢占的实现方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust中的多态 - Trait Object</title>
      <link>https://xiaopengli89.github.io/posts/rust-trait-object/</link>
      <pubDate>Mon, 27 Jul 2020 17:49:22 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/rust-trait-object/</guid>
      <description>&lt;p&gt;Rust是一门静态类型语言，变量的类型一旦确定就不能更改。如果使用一个容器，则容器内部数据类型也必须完全一致，这会少一些灵活性。Rust中的 &lt;code&gt;Trait&lt;/code&gt; 不但可以用作范型约束（&lt;code&gt;Trait Bounds&lt;/code&gt;），也可以单独使用，我们叫 &lt;code&gt;Trait Object&lt;/code&gt;，用它可以间接地实现动态类型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust中的生命周期及变性</title>
      <link>https://xiaopengli89.github.io/posts/rust-lifetime-variance/</link>
      <pubDate>Fri, 24 Jul 2020 15:03:06 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/rust-lifetime-variance/</guid>
      <description>生命周期简介 Rust中没有垃圾收集器（Garbage Collection），而是通过编译器静态分析变量的生命周期（lifetime）以及一套</description>
    </item>
    
    <item>
      <title>Rust新的内联汇编语法</title>
      <link>https://xiaopengli89.github.io/posts/rust-asm-macro/</link>
      <pubDate>Wed, 22 Jul 2020 12:58:16 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/rust-asm-macro/</guid>
      <description>&lt;p&gt;昨天Rust新的内联汇编语法被合并进主分支 &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/2873&#34;&gt;Inline assembly #2873&lt;/a&gt; ，旧的内联汇编宏被重新命名为了 &lt;code&gt;llvm_asm!&lt;/code&gt; ,如果使用了旧的内联汇编宏的项目需要做下修改以保持兼容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OCI容器运行时实现（二）</title>
      <link>https://xiaopengli89.github.io/posts/oci-ns-network/</link>
      <pubDate>Mon, 20 Jul 2020 19:42:00 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/oci-ns-network/</guid>
      <description>&lt;p&gt;本篇文章在之前基础上实现容器的网络互通。&lt;/p&gt;
&lt;p&gt;实现思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在宿主机上创建网桥设备&lt;/li&gt;
&lt;li&gt;当子进程命名空间创建后，父进程获取子进程的命名空间&lt;/li&gt;
&lt;li&gt;利用管道实现父子进程同步&lt;/li&gt;
&lt;li&gt;创建虚拟设备对&lt;/li&gt;
&lt;li&gt;分别将虚拟设备对添加进子进程网络命名空间和连接到网桥&lt;/li&gt;
&lt;li&gt;分配虚拟设备ip并启动&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 由于很多系统调用没有封装，这里将使用宿主机上的命令代替实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OCI容器运行时实现（一）</title>
      <link>https://xiaopengli89.github.io/posts/oci-ns-pid-mount-net/</link>
      <pubDate>Sat, 18 Jul 2020 22:15:35 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/oci-ns-pid-mount-net/</guid>
      <description>&lt;p&gt;一个OCI容器运行时有3个组成部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;NAMESPACES&lt;/a&gt; - 实现资源的隔离&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/cgroups.7.html&#34;&gt;CGROUPS&lt;/a&gt; - 实现资源的限制&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/pivot_root.2.html&#34;&gt;PIVOT_ROOT&lt;/a&gt; - 实现独立的根文件系统&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文将实现一个简易的 &lt;code&gt;进程&lt;/code&gt;、&lt;code&gt;根文件系统&lt;/code&gt;、&lt;code&gt;网络&lt;/code&gt; 隔离的容器运行时。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实现一个无依赖的Rust异步运行时</title>
      <link>https://xiaopengli89.github.io/posts/plain-rt/</link>
      <pubDate>Fri, 10 Jul 2020 19:23:16 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/plain-rt/</guid>
      <description>&lt;p&gt;这篇文章将非常直观、易懂地解释Rust异步运行时的实现。代码不超过300行，只依赖标准库，支持 &lt;code&gt;spawn&lt;/code&gt; 多个 &lt;code&gt;Task&lt;/code&gt; 并发执行。&lt;/p&gt;
&lt;p&gt;首先，Rust标准库对异步的抽象主要集中于几个类型，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Future&lt;/code&gt; - 对于一个异步操作的抽象，代表一个未来事件，如果事件未就绪，应暂停当前 &lt;code&gt;Task&lt;/code&gt;（可以去执行其他 &lt;code&gt;Task&lt;/code&gt;），事件就绪后，恢复执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Waker&lt;/code&gt; - 唤醒器，当事件就绪后，通知运行时重新调度和这个 &lt;code&gt;Waker&lt;/code&gt; 绑定的 &lt;code&gt;Task&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pin&lt;/code&gt; - 固定对象，是为了解决生成器状态机的自引用问题&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rust高阶生命周期绑定</title>
      <link>https://xiaopengli89.github.io/posts/rust-hrtbs/</link>
      <pubDate>Fri, 03 Jul 2020 23:40:45 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/rust-hrtbs/</guid>
      <description>&lt;p&gt;Rust中，&lt;code&gt;lifetime&lt;/code&gt; 其实也是一种类型参数，可以看成范型的一种特殊形式。编译时需要将所有类型（包括 &lt;code&gt;lifetime&lt;/code&gt; ）确定下来，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;kp&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;i32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;&amp;#39;a&lt;/span&gt;: &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;::&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的 &lt;code&gt;&#39;a&lt;/code&gt; 生命周期其实就是变量 &lt;code&gt;x&lt;/code&gt; 所在的block。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
