<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lazy on Torigoth</title>
    <link>https://xiaopengli89.github.io/tags/lazy/</link>
    <description>Recent content in lazy on Torigoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 18 Aug 2020 00:50:39 +0800</lastBuildDate>
    
	<atom:link href="https://xiaopengli89.github.io/tags/lazy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lazy原生类型</title>
      <link>https://xiaopengli89.github.io/posts/lazy-primitives/</link>
      <pubDate>Tue, 18 Aug 2020 00:50:39 +0800</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/lazy-primitives/</guid>
      <description>&lt;p&gt;最近 &lt;a href=&#34;https://github.com/rust-lang/rust/pull/72414&#34;&gt;Add lazy initialization primitives to std #72414&lt;/a&gt; 合并进标准库，以前为了实现全局变量的初始化，
一般有2种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;const fn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第三方crate，比如&lt;a href=&#34;https://crates.io/crates/once_cell&#34;&gt;once_cell&lt;/a&gt; 和 &lt;a href=&#34;https://crates.io/crates/lazy_static&#34;&gt;lazy_static&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于&lt;code&gt;const fn&lt;/code&gt;同常量表达式一样，是在&lt;code&gt;const context&lt;/code&gt;上下文中执行，即在编译时计算函数（或表达式）结果，因此在使用上有诸多限制，比如类型参数只能绑定
生命周期和Sized（?Sized），只能调用其他&lt;code&gt;const fn&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;Lazy类型实现的是延迟初始化，因此不必受到&lt;code&gt;const fn&lt;/code&gt;的限制，同时能加快某些组件的启动，未使用到的功能甚至可以不初始化。&lt;/p&gt;
&lt;p&gt;延迟初始化应用广泛，比如配置文件的读取，异步运行时需要初始化全局的Executor等，因此合并进标准库可以方便不少。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>