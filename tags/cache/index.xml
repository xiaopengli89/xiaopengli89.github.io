<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cache on Torigoth</title>
    <link>https://xiaopengli89.github.io/tags/cache/</link>
    <description>Recent content in cache on Torigoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 19 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xiaopengli89.github.io/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2Q(双链)缓存淘汰策略</title>
      <link>https://xiaopengli89.github.io/posts/two-queue/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xiaopengli89.github.io/posts/two-queue/</guid>
      <description>&lt;p&gt;LRU(最近使用)算法经常用于缓存应用中，最简单的实现是通过一个链表实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插入数据时向头节点插入&lt;/li&gt;
&lt;li&gt;更新数据时，移动节点到头节点&lt;/li&gt;
&lt;li&gt;淘汰数据时删除尾节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是这个简单的实现并不能很好地应付很多场景，缓存的理想情况是预测未来数据的使用情况，尽可能的从缓存中读取数据，减少实际IO操作。&lt;/p&gt;
&lt;p&gt;今天的记录是关于1个LRU的变种算法：2Q(双链)，该算法在Linux页高速缓存回收中被应用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
